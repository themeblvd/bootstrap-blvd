// ==========================================================================
// Vendor Prefixes
// ==========================================================================

// Box sizing
// --------------------------------------------------

@mixin box-sizing($val) {
	-webkit-box-sizing: $val;
	-moz-box-sizing: $val;
	box-sizing: $val;
}

// Box Shadow
// --------------------------------------------------

@mixin box-shadow($val) {
	-webkit-box-shadow: $val;
	-moz-box-shadow: $val;
	box-shadow: $val;
}

// Border Radius
// --------------------------------------------------

@mixin border-radius($val) {
	-webkit-border-radius: $val;
	-moz-border-radius: $val;
	-ms-border-radius: $val;
	border-radius: $val;
}

// Transform
// --------------------------------------------------

@mixin transform($val) {
	-webkit-transform: $val;
	-moz-transform: $val;
	-ms-transform: $val;
	transform: $val;
}

// ==========================================================================
// Grid
// ==========================================================================

// Max-Width Media Query
// --------------------------------------------------

@mixin max-width($size) {
	@if $size == 'xl' {
		@media (max-width: em($breakpoint-xl - 1)) {
			@content;
		}
	}
	@else if $size == 'lg' {
		@media (max-width: em($breakpoint-lg - 1)) {
			@content;
		}
	}
	@else if $size == 'md' {
		@media (max-width: em($breakpoint-md - 1)) {
			@content;
		}
	}
	@else if $size == 'sm' {
		@media (max-width: em($breakpoint-sm - 1)) {
			@content;
		}
	}
	@else if $size == 'xs' {
		@media (max-width: em($breakpoint-xs - 1)) {
			@content;
		}
	}
	@else {
		@media (max-width: em($size)) {
			@content;
		}
	}
}

// Min-Width Media Query
// --------------------------------------------------

@mixin min-width($size) {
	@if $size == 'xl' {
		@media (min-width: em($breakpoint-xl)) {
			@content;
		}
	}
	@else if $size == 'lg' {
		@media (min-width: em($breakpoint-lg)) {
			@content;
		}
	}
	@else if $size == 'md' {
		@media (min-width: em($breakpoint-md)) {
			@content;
		}
	}
	@else if $size == 'sm' {
		@media (min-width: em($breakpoint-sm)) {
			@content;
		}
	}
	@else if $size == 'xs' {
		@media (min-width: em($breakpoint-xs)) {
			@content;
		}
	}
	@else {
		@media (min-width: em($size)) {
			@content;
		}
	}
}

// ==========================================================================
// Typography
// ==========================================================================

// Colorless links, meant to blend into content.
// Used with footer links.
// --------------------------------------------------

@mixin blend-links() {
	a {
		color: inherit;
		border-bottom: 1px solid rgba($clr-text-inv-base, 0.8);
		padding-bottom: 1px;
		text-decoration: none;

		&:hover,
		&:focus {
			border-color: $clr-text-inv-base;
			color: $clr-text-inv-base;
		}
	}
}

// ==========================================================================
// Lists
// ==========================================================================

// Unstyled Lists
// --------------------------------------------------

@mixin list-unstyled() {
	list-style: none;
	padding-left: 0;
}

// ==========================================================================
// Colors
// ==========================================================================

// Text
// --------------------------------------------------

@mixin text-emphasis-variant($parent, $color) {
	#{$parent} {
		color: $color;
	}
	a#{$parent}:hover,
	a#{$parent}:focus {
		color: darken($color, 10%);
	}
}

// Backgrounds
// --------------------------------------------------

@mixin bg-variant($parent, $color, $text: null) {
	#{$parent} {
		background-color: $color;
		@if $parent == info or $parent == success or $parent == warning or $parent == danger {
			border-color: darken(adjust-hue($color, -10), 50%);
		} @else {
			border-color: darken($color, 15%);
		}
		@if $text != null {
			color: $text;
		}
	}
	a#{$parent}:hover,
	a#{$parent}:focus,
	input#{$parent}:hover,
	input#{$parent}:focus,
	button#{$parent}:hover,
	button#{$parent}:focus {
		background-color: darken($color, 10%);
		@if $text != null {
			color: $text;
		}
	}
}

// ==========================================================================
// Utilities
// ==========================================================================

// For modern browsers
// 1. The space content is one way to avoid an Opera bug when the
//    contenteditable attribute is included anywhere else in the document.
//    Otherwise it causes space to appear at the top and bottom of elements
//    that are clearfixed.
// 2. The use of `table` rather than `block` is only necessary if using
//    `:before` to contain the top-margins of child elements.
//
// Source: http://nicolasgallagher.com/micro-clearfix-hack/

@mixin clearfix() {
	&:before,
	&:after {
		content: " "; // 1
		display: table; // 2
	}
	&:after {
		clear: both;
	}
}

// Center-align block-level element.
// --------------------------------------------------

@mixin aligncenter() {
	display: block;
	margin-left: auto;
	margin-right: auto;
}

// Floats
// --------------------------------------------------

@mixin alignleft() {
	float: left !important; // @noflip
	margin: 5px 20px 20px 0; // @noflip
}

@mixin alignright() {
	float: right !important; // @noflip
	margin: 5px 0 20px 20px; // @noflip
}

// Hide Text
// --------------------------------------------------

@mixin hide-text() {
	text-indent: -9999px;
}

// Hide Element
// --------------------------------------------------

@mixin hide($parent) {
	#{$parent} {
		display: none !important;
	}
}

// Show Element
// --------------------------------------------------

@mixin show($parent) {
	#{$parent} {
		display: block !important;
	}
}

// Visible Element
// --------------------------------------------------

@mixin visible($parent) {
	#{$parent} {
		visibility: visible;
	}
}

// Invisible Element
// --------------------------------------------------

@mixin invisible($parent) {
	#{$parent} {
		visibility: hidden;
	}
}

// ==========================================================================
// Tables
// ==========================================================================

// Table Row Backgrounds
// --------------------------------------------------

@mixin table-row-variant($state, $background) {
	// Exact selectors below required to override `.table-striped` and prevent
	// inheritance to nested tables.
	.table-#{$state} {
		&,
		> th,
		> td {
			background-color: $background;
		}
	}

	// Hover states for `.table-hover`
	// Note: this is not available for cells or rows within `thead` or `tfoot`.
	.table-hover {
		$hover-background: darken($background, 5%);

		.table-#{$state} {
			&:hover {
				background-color: $hover-background;

				> td,
				> th {
					background-color: $hover-background;
				}
			}
		}
	}
}
