// ==========================================================================
// Vendor Prefixes
// ==========================================================================

//
// Appearance
//

@mixin appearance($val) {
	-webkit-appearance: $val;
	-moz-appearance: $val;
	appearance: $val;
}

//
// Box sizing
//

@mixin box-sizing($val) {
	-webkit-box-sizing: $val;
	-moz-box-sizing: $val;
	box-sizing: $val;
}

//
// Box Shadow
//

@mixin box-shadow($val) {
	-webkit-box-shadow: $val;
	-moz-box-shadow: $val;
	box-shadow: $val;
}

//
// Border Radius
//

@mixin border-radius($val) {
	-webkit-border-radius: $val;
	-moz-border-radius: $val;
	-ms-border-radius: $val;
	border-radius: $val;
}

//
// Transform
//

@mixin transform($val) {
	-webkit-transform: $val;
	-moz-transform: $val;
	-ms-transform: $val;
	transform: $val;
}

//
// Transition
//

@mixin transition($val) {
	-webkit-transition: $val;
	-moz-transition: $val;
	-ms-transition: $val;
	transform: $val;
}

//
// User select
// For selecting text on the page.
//

@mixin user-select($val) {
	-webkit-user-select: $val;
	-moz-user-select: $val;
	-ms-user-select: $val; // IE10+
	user-select: $val;
}

//
// Placeholder text
//

@mixin placeholder($color: "") {

	@if ($color == "") {
		$color: if($style == 'inverse', $clr-text-inv-placeholder, $clr-text-placeholder);
	}

	&::-moz-placeholder {
		color: $color;
		opacity: 1; // Override Firefox's unusual default opacity; see https://github.com/twbs/bootstrap/pull/11526
	}
	&:-ms-input-placeholder { color: $color; } // Internet Explorer 10+
	&::-webkit-input-placeholder  { color: $color; } // Safari and Chrome
}

// ==========================================================================
// Browser Hacks & Fixes
// ==========================================================================

//
// WebKit-style focus
//

@mixin tab-focus() {
	// WebKit-specific. Other browsers will keep their default outline style.
	// (Initially tried to also force default via `outline: initial`,
	// but that seems to erroneously remove the outline in Firefox altogether.)
	outline: 5px auto -webkit-focus-ring-color;
	outline-offset: -2px;
}

// ==========================================================================
// Breakpoints
// ==========================================================================

//
// Max-Width Media Query
//

@mixin max-width($size) {
	@if $size == 'xl' {
		@media (max-width: em($breakpoint-xl - 1)) {
			@content;
		}
	}
	@else if $size == 'lg' {
		@media (max-width: em($breakpoint-lg - 1)) {
			@content;
		}
	}
	@else if $size == 'md' {
		@media (max-width: em($breakpoint-md - 1)) {
			@content;
		}
	}
	@else if $size == 'sm' {
		@media (max-width: em($breakpoint-sm - 1)) {
			@content;
		}
	}
	@else if $size == 'xs' {
		@media (max-width: em($breakpoint-xs - 1)) {
			@content;
		}
	}
	@else {
		@media (max-width: em($size)) {
			@content;
		}
	}
}

//
// Min-Width Media Query
//

@mixin min-width($size) {
	@if $size == 'xl' {
		@media (min-width: em($breakpoint-xl)) {
			@content;
		}
	}
	@else if $size == 'lg' {
		@media (min-width: em($breakpoint-lg)) {
			@content;
		}
	}
	@else if $size == 'md' {
		@media (min-width: em($breakpoint-md)) {
			@content;
		}
	}
	@else if $size == 'sm' {
		@media (min-width: em($breakpoint-sm)) {
			@content;
		}
	}
	@else if $size == 'xs' {
		@media (min-width: em($breakpoint-xs)) {
			@content;
		}
	}
	@else {
		@media (min-width: em($size)) {
			@content;
		}
	}
}

// ==========================================================================
// Grid
// ==========================================================================

//
// Rows
//

@mixin make-row($gutter: $grid-gutters) {
	margin-right: floor(($gutter / -2));
	margin-bottom: $margin-column;
	margin-left:  ceil(($gutter / -2));
	@include clearfix;
}

//
// Rows w/Equal Height Columns
//

@mixin make-equal-height-grid($breakpoint) {
	@include min-width($breakpoint) {
		.container-#{$breakpoint}-height {
		    display: table;
		    padding-left: 0;
		    padding-right: 0;
		    width: 100%;
		}
		.row-#{$breakpoint}-height {
		    display: table-row;
		}
		.col-#{$breakpoint}-height {
		    display: table-cell;
		    float: none;
		}
	}
}

//
// All columns, all viewports
//

@mixin make-grid-columns($columns, $i: 1, $list: "") {
	@for $i from 1 through $columns {

		$num: "#{$i}";

		@if $columns == 10 {
			$num: "0#{$i}0";
		}

		$list: "#{$list}, .col-xs-#{$num}, .col-sm-#{$num}, .col-md-#{$num}, .col-lg-#{$num}";

	}
	#{$list} {
		position: relative;
		min-height: 1px; // Prevent columns from collapsing when empty
		padding-left: ceil(($grid-gutters / 2));
		padding-right: floor(($grid-gutters / 2));
	}
}

//
// Column class floating
//

@mixin float-grid-columns($columns, $class, $i: 1, $list: "") {

	@for $i from 1 through $columns {

		$num: "#{$i}";

		@if $columns == 10 {
			$num: "0#{$i}0";
		}

		$list: "#{$list}, .col-#{$class}-#{$num}";

	}
	#{$list} {
		@if $direction == 'rtl' {
			float: right;
		} @else {
			float: left;
		}
		margin-bottom: 0;
	}
}

//
// Determine individual column properties
//

@mixin calc-grid-column($columns, $index, $num, $class, $type) {
	@if ($type == width) and ($index > 0) {
		.col-#{$class}-#{$num} {
			width: percentage(($index / $columns));
		}
	}
	@if ($type == push) and ($index > 0) {
		.col-#{$class}-push-#{$num} {
			@if $direction == 'rtl' {
				right: percentage(($index / $columns));
			} @else  {
				left: percentage(($index / $columns));
			}
		}
	}
	@if ($type == push) and ($index == 0) {
		.col-#{$class}-push-0 {
			@if $direction == 'rtl' {
				right: auto;
			} @else  {
				left: auto;
			}
		}
	}
	@if ($type == pull) and ($index > 0) {
		.col-#{$class}-pull-#{$num} {
			@if $direction == 'rtl' {
				left: percentage(($index / $columns));
			} @else  {
				right: percentage(($index / $columns));
			}
		}
	}
	@if ($type == pull) and ($index == 0) {
		.col-#{$class}-pull-0 {
			@if $direction == 'rtl' {
				left: auto;
			} @else {
				right: auto;
			}
		}
	}
	@if ($type == offset) {
		.col-#{$class}-offset-#{$num} {
			@if $direction == 'rtl' {
				margin-right: percentage(($index / $columns));
			} @else {
				margin-left: percentage(($index / $columns));
			}
		}
	}
}

//
// Column properties
//

@mixin loop-grid-columns($columns, $class, $type) {
	@for $i from 0 through $columns {

		$num: "#{$i}";

		@if $columns == 10 {
			$num: "0#{$i}0";
		}

		@include calc-grid-column($columns, $i, $num, $class, $type);

	}
}

//
// Column classes for specific viewports
//

@mixin make-grid($columns, $class) {
	@include float-grid-columns($columns, $class);
	@include loop-grid-columns($columns, $class, width);
	@include loop-grid-columns($columns, $class, pull);
	@include loop-grid-columns($columns, $class, push);
	@include loop-grid-columns($columns, $class, offset);
}

//
// Flush columns
//

@mixin make-flush-columns($columns, $type) {
	@each $breakpoint in $breakpoints {
		@if $breakpoint != xl { // skip xl

			$has-bg: "";
			$non-bg: "";

			@for $i from 1 through $columns {

				$num: "#{$i}";

				@if $columns == 10 {
					$num: "0#{$i}0";
				}

				@if $type == start {
					$has-bg: "#{$has-bg}, .row-flush-start:not(.row-flush-end) .col-#{$breakpoint}-#{$num}.has-bg";
					$non-bg: "#{$non-bg}, .row-flush-start:not(.row-flush-end) .col-#{$breakpoint}-#{$num}:not(.has-bg)";
				} @else  {
					$has-bg: "#{$has-bg}, .row-flush-end:not(.row-flush-start) .col-#{$breakpoint}-#{$num}.has-bg";
					$non-bg: "#{$non-bg}, .row-flush-end:not(.row-flush-start) .col-#{$breakpoint}-#{$num}:not(.has-bg)";
				}

			}

			@include max-width($breakpoint) {

				#{$has-bg} {
					@if $type == 'start' {

						@if $direction == 'rtl' {
							margin-left: $grid-gutters / 2;
						} @else {
							margin-right: $grid-gutters / 2;
						}

					} @else {

						@if $direction == 'rtl' {
							margin-right: $grid-gutters / 2;
						} @else {
							margin-left: $grid-gutters / 2;
						}

					}
				}
				#{$non-bg} {
					@if $type == 'start' {

						@if $direction == 'rtl' {
							padding-right: 0;
						} @else {
							padding-left: 0;
						}

					} @else {

						@if $direction == 'rtl' {
							padding-left: 0;
						} @else {
							padding-right: 0;
						}

					}
				}

			}

		}
	}
}

// ==========================================================================
// Typography
// ==========================================================================

//
// Colorless links, meant to blend into content.
// Used with sections, which shift text to opposite of default style.
//

@mixin blend-links() {
	a {
		color: inherit;
		@if $style == 'inverse' {
			border-bottom: 1px solid $clr-text-base;
		} @else {
			border-bottom: 1px solid rgba($clr-text-inv-base, 0.8);
		}
		padding-bottom: 1px;
		text-decoration: none;

		&:hover,
		&:focus {
			@if $style == 'inverse' {
				border-color: $clr-text-darken;
				color: $clr-text-darken;
			} @else {
				border-color: $clr-text-inv-base;
				color: $clr-text-inv-base;
			}
		}
	}
}

// ==========================================================================
// Spacing
// ==========================================================================


//
// Elements vertically spaced within a document should
// sit flush against the top and bottom of their
// outter containers.
//

@mixin margin-vert-flush {
	&:first-child {
		margin-top: 0;
	}
	&:last-child {
		margin-bottom: 0;
	}
}

// ==========================================================================
// Lists
// ==========================================================================

//
// Unstyled Lists
//

@mixin list-unstyled() {
	list-style: none;
	@if $direction == 'rtl' {
		padding-right: 0;
	} @else {
		padding-left: 0;
	}
}

// ==========================================================================
// Colors
// ==========================================================================

//
// Text
//

@mixin text-emphasis-variant($parent, $color) {
	#{$parent} {
		color: $color;
	}
	a#{$parent}:hover,
	a#{$parent}:focus {
		color: darken($color, 10%);
	}
}

//
// Backgrounds
//

@mixin bg-variant($parent, $color, $text: null) {
	#{$parent} {
		background-color: $color;
		@if $parent == info or $parent == success or $parent == warning or $parent == danger {
			border-color: darken(adjust-hue($color, -10), 50%);
		} @else {
			border-color: darken($color, 15%);
		}
		@if $text != null {
			color: $text;
		}
	}
	@if $text != null and $text != $clr-text-base {
		#{$parent} h1,
		#{$parent} h2,
		#{$parent} h3,
		#{$parent} h4,
		#{$parent} h5,
		#{$parent} h6 {
			color: $text;
		}
	}
	#{$parent}.mobile-navbar ul {
		background-color: $color;
	}
}

// ==========================================================================
// Utilities
// ==========================================================================

// For modern browsers
// 1. The space content is one way to avoid an Opera bug when the
//    contenteditable attribute is included anywhere else in the document.
//    Otherwise it causes space to appear at the top and bottom of elements
//    that are clearfixed.
// 2. The use of `table` rather than `block` is only necessary if using
//    `:before` to contain the top-margins of child elements.
//
// Source: http://nicolasgallagher.com/micro-clearfix-hack/

@mixin clearfix() {
	&:before,
	&:after {
		content: " "; // 1
		display: table; // 2
	}
	&:after {
		clear: both;
	}
}

//
// Center-align block-level element.
//

@mixin aligncenter() {
	display: block;
	margin-left: auto;
	margin-right: auto;
}

//
// Floats
//

@mixin alignleft() {
	float: left !important; // @noflip
	margin: 5px 20px 20px 0; // @noflip
}

@mixin alignright() {
	float: right !important; // @noflip
	margin: 5px 0 20px 20px; // @noflip
}

//
// Hide Text
//

@mixin hide-text() {
	text-indent: -9999px;
}

//
// Hide Element
//

@mixin hide($parent) {
	#{$parent} {
		display: none !important;
	}
}

//
// Show Element
//

@mixin show($parent) {
	#{$parent} {
		display: block !important;
	}
}

//
// Visible Element
//

@mixin visible($parent) {
	#{$parent} {
		visibility: visible;
	}
}

//
// Invisible Element
//

@mixin invisible($parent) {
	#{$parent} {
		visibility: hidden;
	}
}

//
// Background Triangle
//

@mixin background-triangle($color: $clr-dark) {
	$rgb: 'rgb%28#{round(red($color))}, #{round(green($color))}, #{round(blue($color))}%29';
	background-image: url("data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg' version='1.1' width='32' height='24' viewBox='0 0 32 24'><polygon points='0,0 32,0 16,24' style='fill: #{$rgb}'></polygon></svg>");
}

// ==========================================================================
// Tables
// ==========================================================================

//
// Table Row Backgrounds
//

@mixin table-row-variant($state, $background) {
	// Exact selectors below required to override `.table-striped` and prevent
	// inheritance to nested tables.
	.table-#{$state} {
		&,
		> th,
		> td {
			background-color: $background;
		}
	}

	// Hover states for `.table-hover`
	// Note: this is not available for cells or rows within `thead` or `tfoot`.
	.table-hover {
		$hover-background: darken($background, 5%);

		.table-#{$state} {
			&:hover {
				background-color: $hover-background;

				> td,
				> th {
					background-color: $hover-background;
				}
			}
		}
	}
}

// ==========================================================================
// Navigation
// ==========================================================================

//
// Dropdown menu styling
//

@mixin dropdown {
	ul {
		@include box-shadow( 0 2px 5px rgba($clr-black, .05) );
		position: absolute;
	}
	ul li.menu-item-has-children > .menu-btn:after {
		@if $direction == 'rtl' {
			content: "\f104";
		} @else {
			content: "\f105";
		}
	}
	ul.reverse li.menu-item-has-children > .menu-btn:after {
		@if $direction == 'rtl' {
			content: "\f105";
		} @else {
			content: "\f104";
		}
	}
	ul ul {
		@include list-unstyled;
	}
}

// ==========================================================================
// Forms & Buttons
// ==========================================================================

//
// Generate input selectors.
//

@mixin input-selector {

	#{$input-selector} {
		@content;
	}

}

//
// Generate button selectors.
//

@mixin btn-selector {

	#{$btn-selector} {
		@content;
	}

}

//
// Style buttons.
//

@mixin button-variant($color, $text, $bg, $bg-hover: null) {

	// Standard Buttons

	$clr-selector: str-replace( $btn-selector, ",", ".btn-#{$color}," );
	$clr-selector: "#{$clr-selector}.btn-#{$color}";

	#{$clr-selector} {

		background-color: $bg;
		color: $text;

		&:hover,
		&:focus,
		&.focus {
			@if $bg-hover != null {
				background-color: $bg-hover;
			} @else {
				background-color: darken($bg, 10%);
			}
		}

		&:active,
		&.active {
			@if $bg-hover != null {
				background-color: darken($bg-hover, 5%);
			} @else {
				background-color: darken($bg, 15%);
			}
		}
	}

	// Transparent Buttons

	$trans-selector: str-replace( $clr-selector, "#{$color}", "#{$color}.btn-trans" );

	#{$trans-selector} {

		background-color: transparent;
		border-color: $bg;

		@if $color == white {
			color: $bg;
		} @elseif $text != #fff or $color == info or $color == success or $color == warning or $color == danger {
			color: $text;
		} @else {
			color: $bg;
		}

		&:hover,
		&:focus,
		&.focus {
			background-color: $bg;
			color: $text;
		}
	}
}
