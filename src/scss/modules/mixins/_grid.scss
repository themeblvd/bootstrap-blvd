////
/// Mixins: Flexbox Grids
///
/// @access public
/// @group fs-mixins
/// @author Jason Bobich
////

///
/// Inner styling for a grid row container.
///
/// @since 1.0.0
///
/// @param {Number} $gutter - Gutter size in px between columns.
///
@mixin fs-make-row-container($gutter: $fs-grid-gutters) {
  padding: 0 ($gutter / 2);
}

///
/// Inner styling for a grid row.
///
/// @since 1.0.0
///
/// @param {Number} $gutter - Gutter size in px between columns.
///
@mixin fs-make-row($gutter: $fs-grid-gutters) {
  display: flex;
  flex: 0 1 auto;
  flex-direction: row;
  flex-wrap: wrap;
  margin-right: ($gutter / -2);
  margin-bottom: $fs-margin-column;
  margin-left: ($gutter / -2);
}

///
/// Inner styling for a grid column.
///
/// @since 1.0.0
///
@mixin fs-make-col-base {
  position: relative;
  margin-bottom: $fs-margin-column;
  min-height: 1px; // Prevent collapsing.
  padding-left: ceil(($fs-grid-gutters / 2));
  padding-right: floor(($fs-grid-gutters / 2));
  // Prevent columns from becoming too narrow when at smaller grid tiers by
  // always setting `width: 100%;`. This works because we use `flex` values
  // later on to override this initial width.
  width: 100%;

  @include fs-margin-vert-flush;

  > .wrap {
    width: 100%;
  }
}

///
/// Inner styling for all columns for a particular
/// breakpoint, when positioned.
///
/// @since 1.0.0
///
/// @param {String} $breakpoint - Breakpoint name like `sm`.
///
@mixin fs-make-cols($breakpoint) {
  $selector: '.col-#{$breakpoint}';

  @for $i from 1 through 12 {
    $selector: '#{$selector}, .col-#{$breakpoint}-#{$i}';
  }

  @for $i from 1 through 10 {
    $selector: '#{$selector}, .col-#{$breakpoint}-0#{$i}0';
  }

  #{$selector} {
    margin-bottom: 0;
  }
}

///
/// Inner styling for varying width columns.
///
/// @since 1.0.0
///
/// @param {Number} $column - Number of columns to fill from total.
/// @param {Number} $columns - Total columns of grid system, like `10` or `12`.
///
@mixin fs-make-col-width($column, $columns) {
  flex: 0 0 percentage($column / $columns);
  // Add a `max-width` to ensure content within each column does not blow out
  // the width of the column. Applies to IE10+ and Firefox. Chrome and Safari
  // do not appear to require this.
  max-width: percentage($column / $columns);
}

///
/// Make all column width styling, for each breakpoint.
///
/// @since 1.0.0
///
/// @param {String} $breakpoint - Breakpoint name like `sm`.
///
@mixin fs-make-col-widths($breakpoint) {
  // 12 column grid system.
  @for $i from 1 through 12 {
    .col-#{$breakpoint}-#{$i} {
      @include fs-make-col-width($i, 12);
    }
  }

  // 10 column grid system.
  @for $i from 1 through 10 {
    .col-#{$breakpoint}-0#{$i}0 {
      @include fs-make-col-width($i, 10);
    }
  }
}

///
/// Inner styling for column offsetting.
///
/// @since 1.0.0
///
/// @param {Number} $column - Number of columns to fill from total.
/// @param {Number} $columns - Total columns of grid system, like `10` or `12`.
///
@mixin fs-make-col-offset($column, $columns) {
  @if ($direction == 'rtl') {
    margin-right: percentage(($column / $columns));
  } @else {
    margin-left: percentage(($column / $columns));
  }
}

///
/// Make all column offset styling, for each breakpoint.
///
/// @since 1.0.0
///
/// @param {String} $breakpoint - Breakpoint name like `sm`.
///
@mixin fs-make-col-offsets($breakpoint) {
  // 12 column grid system.
  @for $i from 1 through 11 {
    .col-#{$breakpoint}-offset-#{$i} {
      @include fs-make-col-offset($i, 12);
    }
  }

  // 10 column grid system.
  @for $i from 1 through 9 {
    .col-#{$breakpoint}-offset-0#{$i}0 {
      @include fs-make-col-offset($i, 10);
    }
  }
}
